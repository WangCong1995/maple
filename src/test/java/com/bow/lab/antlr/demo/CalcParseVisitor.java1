package com.bow.lab.antlr.demo;

import org.antlr.v4.runtime.tree.AbstractParseTreeVisitor;

/**
 * 访问者模式，是由用户编码控制是否访问子节点。若忘了调用visitChildren，就意味着不会访问子树了。
 * 
 * @see AbstractParseTreeVisitor#visitChildren(org.antlr.v4.runtime.tree.RuleNode)
 * @author vv
 * @since 2018/1/1.
 */
public class CalcParseVisitor extends CalculatorBaseVisitor<Integer> {

    @Override
    public Integer visitInt(CalculatorParser.IntContext ctx) {
        return Integer.valueOf(ctx.INT().getText());
    }

    /**
     * 先访问左子树，获取结果后访问右子树
     * @param ctx
     * @return
     */
    @Override
    public Integer visitMulDiv(CalculatorParser.MulDivContext ctx) {

        int left = visit(ctx.expr(0));
        int right = visit(ctx.expr(1));
        if (ctx.op.getType() == CalculatorParser.MULT) {
            return left * right;
        }
        return left / right; // must be DIV
    }

    @Override
    public Integer visitAddSub(CalculatorParser.AddSubContext ctx) {
        int left = visit(ctx.expr(0)); // get value of left subexpression
        int right = visit(ctx.expr(1)); // get value of right subexpression
        if (ctx.op.getType() == CalculatorParser.PLUS) {
            return left + right;
        }
        return left - right; // must be SUB
    }

    @Override
    public Integer visitParens(CalculatorParser.ParensContext ctx) {
        return visit(ctx.expr()); // return child expr's value
    }
}
